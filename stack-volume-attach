#!/bin/bash
set -eu -o pipefail

DEVICE=/dev/xvdd

if [ $# -lt 2 ]; then
  echo "$0 volume-id mountpoint" >&2
  exit 1
fi

if [ $# -gt 2 ]; then
  DEVICE="$3"
fi

VOLUME_ID=$1
MNT=$2
INSTANCE_ID=$(curl -sL http://169.254.169.254/latest/meta-data/instance-id)
AZ=$(curl -sL http://169.254.169.254/latest/meta-data/placement/availability-zone)
REGION=$(echo "$AZ" | sed 's/[^0-9]*$//')

STACK_ID=$(aws --region "$REGION" ec2 describe-instances --instance-ids "$INSTANCE_ID" \
  | jq -r '.Reservations[0].Instances[0].Tags[]|select(.Key == "aws:cloudformation:stack-id").Value')

VOLUMES=$(aws ec2 --region "$REGION" describe-volumes --filters \
  "Name=tag:aws:cloudformation:stack-id,Values=$STACK_ID" \
  "Name=tag:volume-id,Values=$VOLUME_ID" \
  "Name=availability-zone,Values=$AZ"
)

if [ "$(echo "$VOLUMES" | jq -r '.Volumes[0]')" == "null" ]; then
  echo "Volume $LOGICAL_ID not found in stack $STACK_ID / $AZ" >&2
  exit 1
fi

if [ "$(echo "$VOLUMES" | jq -r '.Volumes[1]')" != "null" ]; then
  echo "More than one volume for stack $STACK_ID in $AZ found" >&2
  exit 1
fi

if fdisk "$DEVICE" -l 2>&1 | grep "doesn't contain a valid partition table"; then
  printf "n\n\n\n\n\nw\n" | fdisk "$DEVICE"
  mkfs.ext4 "${DEVICE}1"
fi

grep "^${DEVICE}1" /proc/mounts || mount "${DEVICE}1" "$MNT"
